## **Exponents and Logarithms Notes**

### **1. What is an Exponent?**
An **exponent** (or power) represents how many times a number (the base) is multiplied by itself.

#### **Mathematical Definition:**
```
a^b = a Ã— a Ã— a Ã— ... Ã— a  (b times)
```
where:
- **a** = Base
- **b** = Exponent

#### **Examples:**
```
2^3 = 2 Ã— 2 Ã— 2 = 8
5^4 = 5 Ã— 5 Ã— 5 Ã— 5 = 625
10^2 = 10 Ã— 10 = 100
```

### **2. Special Cases of Exponents**
- **Any number raised to 1:** `a^1 = a`
- **Any number raised to 0:** `a^0 = 1`
- **Zero raised to any positive power:** `0^n = 0`
- **Negative exponent:** `a^(-b) = 1 / a^b`
- **Fractional exponent:** `a^(1/b) = b-th root of a`

#### **Examples:**
```
9^0 = 1
2^-3 = 1 / 2^3 = 1/8 = 0.125
9^(1/2) = sqrt(9) = 3
```

### **3. Exponent Rules**
1. **Product Rule:** `a^m Ã— a^n = a^(m+n)`
2. **Quotient Rule:** `a^m / a^n = a^(m-n)`
3. **Power of a Power Rule:** `(a^m)^n = a^(m Ã— n)`
4. **Power of a Product Rule:** `(a Ã— b)^m = a^m Ã— b^m`
5. **Power of a Fraction Rule:** `(a/b)^m = a^m / b^m`

#### **Examples:**
```
2^3 Ã— 2^4 = 2^(3+4) = 2^7 = 128
(3^2)^4 = 3^(2Ã—4) = 3^8 = 6561
(4/5)^3 = 4^3 / 5^3 = 64/125
```

### **4. Logarithms (Inverse of Exponents)**
A **logarithm** answers the question:
> "To what power must a base be raised to get a given number?"

#### **Mathematical Definition:**
```
log_b(x) = y  is equivalent to  b^y = x
```
- **b** = Base
- **x** = Number
- **y** = Exponent

#### **Common Logarithms:**
1. **Base 10 Logarithm (Common Log)**
   - `log_10(1000) = 3`  â†’ Because `10^3 = 1000`
   - `log_10(100) = 2`  â†’ Because `10^2 = 100`
   - `log_10(500) â‰ˆ 2.7` â†’ Because `10^2.7 â‰ˆ 500`

2. **Natural Logarithm (Base e)**
   - `ln(x) = log_e(x)`, where `e â‰ˆ 2.718`
   - Example: `ln(e^2) = 2`

### **5. Logarithm Properties**
1. **Product Rule:** `log_b(A Ã— B) = log_b(A) + log_b(B)`
2. **Quotient Rule:** `log_b(A / B) = log_b(A) - log_b(B)`
3. **Power Rule:** `log_b(A^C) = C Ã— log_b(A)`
4. **Change of Base Rule:** `log_b(A) = log_c(A) / log_c(B)`

#### **Example Calculations:**
```
log_10(1000 Ã— 10) = log_10(1000) + log_10(10) = 3 + 1 = 4
log_10(27) / log_10(3) = log_3(27) = 3
```

### **6. Floor Function (`math.floor()`)**
The **floor function** rounds a number **down** to the nearest integer.

#### **Examples:**
```
floor(4.8) = 4
floor(7.2) = 7
floor(-2.5) = -3
floor(5) = 5  (unchanged)
```

### **7. Exponents and Logarithms in Python**

#### **Using `**` Operator for Exponents:**
```python
print(2**3)  # Output: 8
print(5**4)  # Output: 625
print(10**0) # Output: 1
print(2**-3) # Output: 0.125
```

#### **Using `math.pow()` for Exponents:**
```python
import math
print(math.pow(2, 3))  # Output: 8.0
print(math.pow(5, 4))  # Output: 625.0
```

#### **Using `math.log10()` for Logarithms:**
```python
import math
print(math.log10(1000))  # Output: 3.0
print(math.log10(500))   # Output: â‰ˆ2.7
```

#### **Using `math.floor()` for Flooring Values:**
```python
import math
print(math.floor(4.8))  # Output: 4
print(math.floor(-2.5)) # Output: -3
```

### **8. Factorial Digits Optimization Using Logarithm**
Instead of calculating `N!`, we can use:
```python
import math

def digitsInFactorial(N):
    if N == 0 or N == 1:
        return 1
    log_sum = sum(math.log10(i) for i in range(1, N + 1))
    return math.floor(log_sum) + 1
```
#### **Explanation:**
- Instead of calculating `N!`, we sum `log10(i)` for `i` from `1` to `N`.
- This gives `log10(N!)`, which tells us the number of digits in `N!`.
- `math.floor(log_sum) + 1` gives the final digit count.

#### **Example Calculation for `N = 5`:**
```
log_10(1) + log_10(2) + log_10(3) + log_10(4) + log_10(5)
= 0 + 0.301 + 0.477 + 0.602 + 0.699
= 2.08
floor(2.08) + 1 = 3
```
Since `5! = 120` (which has **3 digits**), the method is **correct**!

---
### **Conclusion**
- **Exponents** are repeated multiplications.
- **Logarithms** are the inverse of exponents.
- **Floor function** rounds down to the nearest integer.
- **Using logarithms, we can efficiently count factorial digits without computing large numbers.**

----------------------------------------------------------------------------------------------------------------------------------------------

## **Understanding Factorial Digit Count Optimization Using Logarithms**

### **Problem Statement**
We need to determine the number of digits in `N!` (factorial of `N`).

### **Naive Approach (Factorial Computation)**
1. Compute `N!` using multiplication.
2. Convert `N!` to a string.
3. Count the number of digits.

#### **Example for N = 5**
```
5! = 5 Ã— 4 Ã— 3 Ã— 2 Ã— 1 = 120
Number of digits = len(str(120)) = 3
```
#### **Issues with This Approach:**
- Factorials grow extremely fast.
- Direct computation becomes infeasible for large `N` due to huge numbers.
- Time complexity: **O(N)** (multiplication overhead).

---
### **Optimized Logarithm Approach**
Instead of computing `N!` directly, we use **logarithms** to convert multiplication into addition.

#### **Logarithm Property:**
```
log(A Ã— B) = log(A) + log(B)
```

Using this property, we express:
```
log_10(N!) = log_10(1) + log_10(2) + log_10(3) + ... + log_10(N)
```
Since logarithms transform large multiplications into simple summations, this method is much **faster and avoids handling large numbers**.

#### **Formula to Find Digits in N!**
```
digits = floor(sum(log_10(i) for i in range(1, N+1))) + 1
```

---
### **Time Complexity Comparison**
#### **Naive Approach (Factorial Computation)**
- Computing `N!` takes **O(N) multiplications**.
- Counting digits takes **O(log(N!))**.
- **Total time complexity: O(N)** (but large number handling makes it impractical).

#### **Optimized Logarithm Approach**
- We compute `sum(log_10(i))` in **O(N) time**.
- Uses addition instead of large number multiplication.
- Final `floor()` operation is **O(1)**.

Thus, the **logarithm approach is much faster in practice** since it avoids computing large factorials.

---
### **Example Calculation (N = 5)**
#### **Naive Approach:**
```
5! = 5 Ã— 4 Ã— 3 Ã— 2 Ã— 1 = 120
Number of digits = len(str(120)) = 3
```
#### **Logarithm Approach:**
```
log_10(1) + log_10(2) + log_10(3) + log_10(4) + log_10(5)
= 0 + 0.301 + 0.477 + 0.602 + 0.699
= 2.08
floor(2.08) + 1 = 3
```
Both methods return **3 digits**, but the **logarithm approach is significantly faster**!

---
### **Final Conclusion**
- **Factorial numbers grow exponentially**, making direct computation infeasible.
- **Using logarithms, we convert multiplication into addition**, reducing computational complexity.
- **The sum of logarithms directly gives the number of digits** without calculating `N!`.
- **Time complexity improves from `O(N)` with large number handling to `O(N)` with simple sums, making it practically much faster.**

ðŸš€ **The log-based approach is significantly more efficient!**



